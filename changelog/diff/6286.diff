Index: modules/pvm/src/main/java/org/jbpm/pvm/internal/query/TaskQueryImpl.java
===================================================================
--- modules/pvm/src/main/java/org/jbpm/pvm/internal/query/TaskQueryImpl.java	(revision 6285)
+++ modules/pvm/src/main/java/org/jbpm/pvm/internal/query/TaskQueryImpl.java	(revision 6286)
@@ -139,9 +139,9 @@
     hql.append("select ");
     
     if (count) {
-      hql.append("count(task) ");
+      hql.append("count(distinct task) ");
     } else {
-      hql.append("task ");
+      hql.append("distinct task ");
     }
     
     hql.append("from ");
@@ -167,7 +167,7 @@
         groupIds = new ArrayList<String>();
         for (Group group: groups) {
           groupIds.add(group.getId());
-        }
+        }  
         appendWhereClause("((participant.userId = :candidateUserId) or (participant.groupId in (:candidateGroupIds)))", hql);
       }
     }
Index: modules/test-db/src/test/java/org/jbpm/test/task/TaskQueryCandidatesTest.java
===================================================================
--- modules/test-db/src/test/java/org/jbpm/test/task/TaskQueryCandidatesTest.java	(revision 6285)
+++ modules/test-db/src/test/java/org/jbpm/test/task/TaskQueryCandidatesTest.java	(revision 6286)
@@ -49,6 +49,7 @@
 
     developmentGroupId = identityService.createGroup("development");
     identityService.createMembership("jackblack", developmentGroupId);
+    identityService.createMembership("johndoe", developmentGroupId);
   }
 
   public void tearDown() throws Exception {
@@ -127,4 +128,51 @@
     taskService.deleteTaskCascade(johnsOtherTaskId);
     taskService.deleteTaskCascade(joesOtherTaskId);
   }
+  
+  public void testGroupCandidateDuplicate() {
+    Task task = taskService.newTask();
+    task.setName("do laundry");
+    String taskId = taskService.saveTask(task);
+    taskService.addTaskParticipatingGroup(taskId, salesGroupId, Participation.CANDIDATE);
+    taskService.addTaskParticipatingGroup(taskId, developmentGroupId, Participation.CANDIDATE);
+
+    // this tasks are a diversion to see if the query only selects the above task
+    task = taskService.newTask();
+    task.setName("dishes");
+    String johnsOtherTaskId = taskService.saveTask(task);
+    
+    // this tasks are a diversion to see if the query only selects the above task
+    task = taskService.newTask();
+    task.setName("dishes");
+    String joesOtherTaskId = taskService.saveTask(task);
+    
+
+    List<Task> groupTasks = taskService.findGroupTasks("johndoe");
+    assertEquals(1, groupTasks.size());
+    assertEquals(taskId, groupTasks.get(0).getId());
+    
+    groupTasks = taskService.findGroupTasks("joesmoe");
+    assertEquals(1, groupTasks.size());
+    assertEquals(taskId, groupTasks.get(0).getId());
+    
+    groupTasks = taskService.findGroupTasks("jackblack");
+    assertEquals(1, groupTasks.size());
+    
+    taskService.deleteTaskCascade(taskId);
+    taskService.deleteTaskCascade(johnsOtherTaskId);
+    taskService.deleteTaskCascade(joesOtherTaskId);
+  }
+  
+  public void testCountGroupCandidateDuplicate() {
+    Task task = taskService.newTask();
+    task.setName("do laundry");
+    String taskId = taskService.saveTask(task);
+    taskService.addTaskParticipatingGroup(taskId, salesGroupId, Participation.CANDIDATE);
+    taskService.addTaskParticipatingGroup(taskId, developmentGroupId, Participation.CANDIDATE);
+    
+    long count = taskService.createTaskQuery().candidate("johndoe").count();
+    assertEquals(1, count);
+    
+    taskService.deleteTaskCascade(taskId);
+  }
 }
