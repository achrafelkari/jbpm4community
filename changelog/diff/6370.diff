Index: modules/jpdl/src/test/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinitionTest.java
===================================================================
--- modules/jpdl/src/test/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinitionTest.java	(revision 0)
+++ modules/jpdl/src/test/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinitionTest.java	(revision 6370)
@@ -0,0 +1,26 @@
+
+package org.jbpm.jpdl.internal.model;
+
+import junit.framework.TestCase;
+import org.jbpm.pvm.internal.task.TaskDefinitionImpl;
+
+/**
+ * @author Huisheng Xu
+ */
+public class JpdlProcessDefinitionTest extends TestCase {
+    public void testCreateTaskDefinition() {
+        JpdlProcessDefinition jpdlProcessDefinition = new JpdlProcessDefinition();
+        jpdlProcessDefinition.createTaskDefinition("do something");
+        assertEquals("do something", jpdlProcessDefinition.getTaskDefinition("do something").getName());
+        assertEquals(1, jpdlProcessDefinition.getTaskDefinitions().size());
+    }
+
+    public void testAddTaskDefinition() {
+        JpdlProcessDefinition jpdlProcessDefinition = new JpdlProcessDefinition();
+        TaskDefinitionImpl taskDefinition = new TaskDefinitionImpl();
+        taskDefinition.setName("do something");
+        jpdlProcessDefinition.addTaskDefinitionImpl(taskDefinition);
+        assertEquals("do something", jpdlProcessDefinition.getTaskDefinition("do something").getName());
+        assertEquals(1, jpdlProcessDefinition.getTaskDefinitions().size());
+    }
+}
Index: modules/jpdl/src/main/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinition.java
===================================================================
--- modules/jpdl/src/main/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinition.java	(revision 6369)
+++ modules/jpdl/src/main/java/org/jbpm/jpdl/internal/model/JpdlProcessDefinition.java	(revision 6370)
@@ -35,9 +35,8 @@
 public class JpdlProcessDefinition extends ProcessDefinitionImpl {
 
   private static final long serialVersionUID = 1L;
-  
+
   Map<String, SwimlaneDefinitionImpl> swimlaneDefinitions = new HashMap<String, SwimlaneDefinitionImpl>();
-  Map<String, TaskDefinitionImpl> taskDefinitions = new HashMap<String, TaskDefinitionImpl>();
 
   protected ExecutionImpl newProcessInstance() {
     return new ExecutionImpl();
@@ -56,10 +55,11 @@
 
   public TaskDefinitionImpl createTaskDefinition(String name) {
     TaskDefinitionImpl taskDefinition = new TaskDefinitionImpl();
+    taskDefinition.setName(name);
     taskDefinitions.put(name, taskDefinition);
     return taskDefinition;
   }
-  
+
   public Map<String, TaskDefinitionImpl> getTaskDefinitions() {
     return taskDefinitions;
   }
Index: modules/bpmn/src/test/java/org/jbpm/bpmn/model/BpmnProcessDefinitionTest.java
===================================================================
--- modules/bpmn/src/test/java/org/jbpm/bpmn/model/BpmnProcessDefinitionTest.java	(revision 0)
+++ modules/bpmn/src/test/java/org/jbpm/bpmn/model/BpmnProcessDefinitionTest.java	(revision 6370)
@@ -0,0 +1,26 @@
+
+package org.jbpm.bpmn.model;
+
+import junit.framework.TestCase;
+import org.jbpm.pvm.internal.task.TaskDefinitionImpl;
+
+/**
+ * @author Huisheng Xu
+ */
+public class BpmnProcessDefinitionTest extends TestCase {
+    public void testCreateTaskDefinition() {
+        BpmnProcessDefinition bpmnProcessDefinition = new BpmnProcessDefinition();
+        bpmnProcessDefinition.createTaskDefinition("do something");
+        assertEquals("do something", bpmnProcessDefinition.getTaskDefinition("do something").getName());
+        assertEquals(1, bpmnProcessDefinition.getTaskDefinitions().size());
+    }
+
+    public void testAddTaskDefinition() {
+        BpmnProcessDefinition bpmnProcessDefinition = new BpmnProcessDefinition();
+        TaskDefinitionImpl taskDefinition = new TaskDefinitionImpl();
+        taskDefinition.setName("do something");
+        bpmnProcessDefinition.addTaskDefinitionImpl(taskDefinition);
+        assertEquals("do something", bpmnProcessDefinition.getTaskDefinition("do something").getName());
+        assertEquals(1, bpmnProcessDefinition.getTaskDefinitions().size());
+    }
+}
Index: modules/bpmn/src/main/java/org/jbpm/bpmn/model/BpmnProcessDefinition.java
===================================================================
--- modules/bpmn/src/main/java/org/jbpm/bpmn/model/BpmnProcessDefinition.java	(revision 6369)
+++ modules/bpmn/src/main/java/org/jbpm/bpmn/model/BpmnProcessDefinition.java	(revision 6370)
@@ -40,8 +40,6 @@
 
   private static final long serialVersionUID = 1L;
 
-  protected Map<String, TaskDefinitionImpl> taskDefinitions = new HashMap<String, TaskDefinitionImpl>();
-  protected List<VariableDefinitionImpl> processVariableDefinitions = new ArrayList<VariableDefinitionImpl>();
   protected Map<String, Element> messages = new HashMap<String, Element>();
   protected Map<String, Element> itemDefinitions = new HashMap<String, Element>();
   protected Map<String, Element> interfaces = new HashMap<String, Element>();
@@ -56,6 +54,7 @@
 
   public TaskDefinitionImpl createTaskDefinition(String name) {
     TaskDefinitionImpl taskDefinition = new TaskDefinitionImpl();
+    taskDefinition.setName(name);
     taskDefinitions.put(name, taskDefinition);
     return taskDefinition;
   }
@@ -69,7 +68,7 @@
   }
 
   public void setVariableDefinition(List<VariableDefinitionImpl> variableDefinitions) {
-    this.processVariableDefinitions = variableDefinitions;
+    this.variableDefinitions = variableDefinitions;
   }
 
   public Resource getResource(String ref) {
@@ -88,53 +87,53 @@
     this.interfaces = interfaces;
   }
 
-  
+
   public Map<String, Element> getOperations() {
     return operations;
   }
 
-  
+
   public void setOperations(Map<String, Element> operations) {
     this.operations = operations;
   }
-  
+
   public Map<String, Element> getMessages() {
     return messages;
   }
 
-  
+
   public void setMessages(Map<String, Element> messages) {
     this.messages = messages;
   }
 
-  
+
   public Map<String, Element> getItemDefinitions() {
     return itemDefinitions;
   }
 
-  
+
   public void setItemDefinitions(Map<String, Element> itemDefinitions) {
     this.itemDefinitions = itemDefinitions;
   }
 
   public void addSequenceFlow(String transitionId, Transition transition) {
     this.sequenceFlow.put(transitionId, transition);
-    
+
     String source = transition.getSource().getName();
     if (sourceToTargetMapping.get(source) == null) {
       sourceToTargetMapping.put(source, new HashSet<String>());
     }
     sourceToTargetMapping.get(source).add(transition.getDestination().getName());
   }
-  
+
   public Map<String, Set<String>> getSourceToTargetMapping() {
     return sourceToTargetMapping;
   }
-  
+
   public boolean isReachable(String srcActivityId , String dstActivityId) {
     return isReachable(srcActivityId, dstActivityId, new HashSet<String>());
   }
-  
+
   protected boolean isReachable(String srcActivityId , String dstActivityId, Set<String> alreadyVisited) {
     if (srcActivityId.equals(dstActivityId)) {
       return true;
