/* * JBoss, Home of Professional Open Source * Copyright 2005, JBoss Inc., and individual contributors as indicated * by the @authors tag. See the copyright.txt in the distribution for a * full listing of individual contributors. * * This is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as * published by the Free Software Foundation; either version 2.1 of * the License, or (at your option) any later version. * * This software is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this software; if not, write to the Free * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA * 02110-1301 USA, or see the FSF site: http://www.fsf.org. */package org.jbpm.test.activity.foreach;import java.util.Arrays;import java.util.Collections;import java.util.Date;import java.util.List;import java.util.Map;import org.jbpm.api.Execution;import org.jbpm.api.JbpmException;import org.jbpm.api.ProcessInstance;import org.jbpm.api.history.HistoryProcessInstance;import org.jbpm.api.history.HistoryTask;import org.jbpm.api.task.Task;import org.jbpm.test.JbpmTestCase;/** * @author Maciej Swiderski */public class ForEachTest extends JbpmTestCase {  public void testForEachLiteral() {    deployJpdlXmlString(""      + "<process name='ForEachLiteral' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='alex, mike'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "     <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44' multiplicity='2'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachLiteral");    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertEquals("task1", taskMike.getActivityName());    taskService.completeTask(taskMike.getId());    processInstance = executionService.findProcessInstanceById(processInstance.getId());    assertEquals(2, processInstance.getExecutions().size());    for (Execution exec : processInstance.getExecutions()) {      assertEquals(Execution.STATE_ACTIVE_CONCURRENT, exec.getState());      executionService.signalExecutionById(exec.getId());    }    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());  }  public void testForEachList() {    deployJpdlXmlString(""      + "<process name='ForEachList' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "     <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44' multiplicity='#{actors.size()}'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", Arrays.asList("alex", "mike"));    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachList", variables);    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertEquals("task1", taskMike.getActivityName());    taskService.completeTask(taskMike.getId());    processInstance = executionService.findProcessInstanceById(processInstance.getId());    assertEquals(2, processInstance.getExecutions().size());    for (Execution exec : processInstance.getExecutions()) {      assertEquals(Execution.STATE_ACTIVE_CONCURRENT, exec.getState());      executionService.signalExecutionById(exec.getId());    }    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());  }  public void testForEachArray() {    deployJpdlXmlString(""      + "<process name='ForEachArray' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "   <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44' multiplicity='#{length(actors)}'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", new String[] { "alex", "mike" });    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachArray", variables);    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertEquals("task1", taskMike.getActivityName());    taskService.completeTask(taskMike.getId());    processInstance = executionService.findProcessInstanceById(processInstance.getId());    assertEquals(2, processInstance.getExecutions().size());    for (Execution exec : processInstance.getExecutions()) {      assertEquals(Execution.STATE_ACTIVE_CONCURRENT, exec.getState());      executionService.signalExecutionById(exec.getId());    }    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());  }  public void testForEachInvalid() {    deployJpdlXmlString(""      + "<process name='ForEachInvalid' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "   <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", new Date());    try {      executionService.startProcessInstanceByKey("ForEachInvalid", variables);      fail("It should fail, since for-each list of items is a Date object");    }    catch (JbpmException e) {      // expected result    }  }  public void testForEachMissingVar() {    try {      deployJpdlXmlString(""        + "<process name='ForEachMissingVar' xmlns='http://jbpm.org/jpdl/4.4'>"        + "   <start g='179,17,32,29' name='start1'>"        + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"        + "   </start>"        + "   <foreach g='185,95,49,50' name='foreach1' in='#{actors}' >"        + "      <transition name='left' to='task1' g='-44,-18'/>"        + "   </foreach>"        + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"        + "      <transition name='to state' to='Big car' g='-43,-18'/>"        + "   </task>"        + "   <state name='Big car' > "        + "   <transition name='to join2' to='join2' g='-43,-18'/>"        + "   </state> "        + "   <join name='join2' g='192,511,57,44'>"        + "      <transition name='to end1' to='end1' g='-42,-18'/>"        + "   </join>"        + "   <end g='193,606,38,33' name='end1'/>"        + "</process>");      fail("expected foreach with missing variable to fail");    }    catch (JbpmException e) {      // expected result      e.printStackTrace();    }  }  public void testForEachJoinMultiplicity() {    deployJpdlXmlString(""      + "<process name='ForEachJoinMultiplicity' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='join2' g='-43,-18'/>"      + "   </task>"      + "   <join name='join2' g='192,511,57,44' multiplicity='#{actors.size()-1}'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", Arrays.asList("alex", "mike"));    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachJoinMultiplicity", variables);    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertNull(taskMike);    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());  }  public void testForEachConditionMet() {    deployJpdlXmlString(""      + "<process name='ForEachConditionMet' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='alex, mike, peter'>"      + "      <transition name='left' to='task1' g='-44,-18'>"      + "         <condition expr='#{assign != &quot;peter&quot;}' /> "      + "      </transition>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "     <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44' multiplicity='2'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachConditionMet");    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertEquals("task1", taskMike.getActivityName());    taskService.completeTask(taskMike.getId());    processInstance = executionService.findProcessInstanceById(processInstance.getId());    assertEquals(2, processInstance.getExecutions().size());    for (Execution exec : processInstance.getExecutions()) {      assertEquals(Execution.STATE_ACTIVE_CONCURRENT, exec.getState());      executionService.signalExecutionById(exec.getId());    }    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());  }  public void testForEachConditionNotMet() {    deployJpdlXmlString(""      + "<process name='ForEachConditionNotMet' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='alex, mike'>"      + "      <transition name='left' to='task1' g='-44,-18'>"      + "         <condition expr='#{assign==&quot;peter&quot;}' /> "      + "      </transition>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='Big car' g='-43,-18'/>"      + "   </task>"      + "   <state name='Big car' > "      + "      <transition name='to join2' to='join2' g='-43,-18'/>"      + "   </state> "      + "   <join name='join2' g='192,511,57,44'>"      + "      <transition name='to end1' to='end1' g='-42,-18'/>"      + "   </join>"      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachConditionNotMet");    List<Task> tasks = taskService.createTaskQuery().list();    assertEquals(0, tasks.size());    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());  }  public void testForEachNoTransitions() {    try {      deployJpdlXmlString(""        + "<process name='ForEachNoTransition' xmlns='http://jbpm.org/jpdl/4.4'>"        + "   <start g='179,17,32,29' name='start1'>"        + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"        + "   </start>"        + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"        + "   </foreach>"        + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"        + "      <transition name='to state' to='Big car' g='-43,-18'/>"        + "   </task>"        + "   <state name='Big car' > "        + "   <transition name='to join2' to='join2' g='-43,-18'/>"        + "   </state> "        + "   <join name='join2' g='192,511,57,44'>"        + "      <transition name='to end1' to='end1' g='-42,-18'/>"        + "   </join>"        + "   <end g='193,606,38,33' name='end1'/>"        + "</process>");      fail("expected deployment failure");    }    catch (JbpmException e) {      // expected result    }  }    public void testForEachJoinMultiplicityLeftTask() {    deployJpdlXmlString(""      + "<process name='ForEachJoinMultiplicity' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='join2' g='-43,-18'/>"      + "   </task>"      + "   <join name='join2' g='192,511,57,44' multiplicity='#{actors.size()-1}'>"      + "      <transition name='to Big car' to='Big car' g='-42,-18'/>"      + "   </join>"      + "   <state name='Big car' > "      + "   <transition name='to end1' to='end1' g='-43,-18'/>"      + "   </state> "      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", Arrays.asList("alex", "mike"));    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachJoinMultiplicity", variables);    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertNull(taskMike);        processInstance = executionService.findProcessInstanceById(processInstance.getId());        executionService.signalExecutionById(processInstance.getId());    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());        List<HistoryTask> historyTasks = historyService.createHistoryTaskQuery().assignee("alex").list();    assertEquals(1, historyTasks.size());    assertEquals(HistoryTask.STATE_COMPLETED, historyTasks.get(0).getState());        historyTasks = historyService.createHistoryTaskQuery().assignee("mike").list();    assertEquals(1, historyTasks.size());    assertEquals(HistoryTask.STATE_OBSOLETE, historyTasks.get(0).getState());  }  public void testForEachJoinMultiplicityLeftTasks() {    deployJpdlXmlString(""      + "<process name='ForEachJoinMultiplicity' xmlns='http://jbpm.org/jpdl/4.4'>"      + "   <start g='179,17,32,29' name='start1'>"      + "      <transition g='-43,-18' name='to foreach1' to='foreach1'/>"      + "   </start>"      + "   <foreach g='185,95,49,50' name='foreach1' var='assign' in='#{actors}'>"      + "      <transition name='left' to='task1' g='-44,-18'/>"      + "   </foreach>"      + "   <task name='task1' g='90,177,73,44' assignee='#{assign}'>"      + "      <transition name='to state' to='join2' g='-43,-18'/>"      + "   </task>"      + "   <join name='join2' g='192,511,57,44' multiplicity='#{actors.size()-2}'>"      + "      <transition name='to Big car' to='Big car' g='-42,-18'/>"      + "   </join>"      + "   <state name='Big car' > "      + "   <transition name='to end1' to='end1' g='-43,-18'/>"      + "   </state> "      + "   <end g='193,606,38,33' name='end1'/>"      + "</process>");    Map<String, ?> variables = Collections.singletonMap("actors", Arrays.asList("alex", "mike", "bob"));    ProcessInstance processInstance = executionService.startProcessInstanceByKey("ForEachJoinMultiplicity", variables);    Task taskAlex = taskService.createTaskQuery().assignee("alex").uniqueResult();    assertEquals("task1", taskAlex.getActivityName());    taskService.completeTask(taskAlex.getId());    Task taskMike = taskService.createTaskQuery().assignee("mike").uniqueResult();    assertNull(taskMike);        Task taskBob = taskService.createTaskQuery().assignee("bob").uniqueResult();    assertNull(taskBob);        processInstance = executionService.findProcessInstanceById(processInstance.getId());        executionService.signalExecutionById(processInstance.getId());    HistoryProcessInstance history = historyService.createHistoryProcessInstanceQuery()      .processInstanceId(processInstance.getId())      .uniqueResult();    assertEquals(ProcessInstance.STATE_ENDED, history.getState());    assertEquals("end1", history.getEndActivityName());        List<HistoryTask> historyTasks = historyService.createHistoryTaskQuery().assignee("alex").list();    assertEquals(1, historyTasks.size());    assertEquals(HistoryTask.STATE_COMPLETED, historyTasks.get(0).getState());        historyTasks = historyService.createHistoryTaskQuery().assignee("mike").list();    assertEquals(1, historyTasks.size());    assertEquals(HistoryTask.STATE_OBSOLETE, historyTasks.get(0).getState());        historyTasks = historyService.createHistoryTaskQuery().assignee("bob").list();    assertEquals(1, historyTasks.size());    assertEquals(HistoryTask.STATE_OBSOLETE, historyTasks.get(0).getState());  }}