<chapter id="variables">
  <title>Variables</title>
  
  <para>Process variables can be accessed from outside the process with methods from the <literal>ExecutionService</literal>:
  </para>
  
  <itemizedlist>
    <listitem><literal>ProcessInstance startProcessInstanceById(String processDefinitionId, Map&lt;String, Object&gt; variables);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceById(String processDefinitionId, Map&lt;String, Object&gt; variables, String processInstanceKey);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map&lt;String, ?&gt; variables, String processInstanceKey);</literal></listitem>
    <listitem><literal>void setVariable(String executionId, String name, Object value);</literal></listitem>
    <listitem><literal>void setVariables(String executionId, Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>Object getVariable(String executionId, String variableName);</literal></listitem>
    <listitem><literal>Set&lt;String&gt; getVariableNames(String executionId);</literal></listitem>
    <listitem><literal>Map&lt;String, Object&gt; getVariables(String executionId, Set&lt;String&gt; variableNames);</literal></listitem>
  </itemizedlist>
  
  <para>And from inside the process with methods from Execution interfaces passed to user code like 
  <literal>ActivityExecution</literal> and <literal>EventListenerExecution</literal>:
  </para>

  <itemizedlist>
    <listitem><literal>Object getVariable(String key);</literal></listitem>
    <listitem><literal>void setVariables(Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>boolean hasVariable(String key);</literal></listitem>
    <listitem><literal>boolean removeVariable(String key);</literal></listitem>
    <listitem><literal>void removeVariables();</literal></listitem>
    <listitem><literal>boolean hasVariables();</literal></listitem>
    <listitem><literal>Set&lt;String&gt; getVariableKeys();</literal></listitem>
    <listitem><literal>Map&lt;String, Object&gt; getVariables();</literal></listitem>
    <listitem><literal>void createVariable(String key, Object value);</literal></listitem>
    <listitem><literal>void createVariable(String key, Object value, String typeName);</literal></listitem>
  </itemizedlist>

  <para>jBPM doesn't have a mechanism for detecting changes automatically to variable values.  So if you
  get e.g. a serializable collection from the process variables and add an element, then you need to 
  set the changed variable value explicitely for the changes to be saved to the DB.   
  </para>
  
  <section>
    <title>Variable scoping</title>
    <para>By default variables are created in the top level process instance scope.  This means they are 
    visible and accessible in all the paths of execution of the whole process instance.  Process variables are 
    created dynamically.  Meaning that a variable is created the first time it is set 
    through one of these methods.
    </para>
    <para>Each execution is a variable scope.  Variables declared in a nested execution level will 'see'
    their own variables and variables declared in parent executions according to the normal scoping rules.
    With the <literal>createVariable</literal> methods in the execution interfaces <literal>ActivityExecution</literal>
    and <literal>EventListenerExecution</literal>, execution-local variables can be created. 
    </para>
	  <para>In one of the future releases, we might add variable declaration in the jPDL process language.
	  </para>
  </section>
  
  <section>
    <title>Variable types</title>
    <para>jBPM supports following Java types as process variables:</para>
    <itemizedlist>
      <listitem>java.lang.String</listitem>
      <listitem>java.lang.Long</listitem>
      <listitem>java.lang.Double</listitem>
      <listitem>java.util.Date</listitem>
      <listitem>java.lang.Boolean</listitem>
      <listitem>java.lang.Character</listitem>
      <listitem>java.lang.Byte</listitem>
      <listitem>java.lang.Short</listitem>
      <listitem>java.lang.Integer</listitem>
      <listitem>java.lang.Float</listitem>
      <listitem>byte[] (byte array)</listitem>
      <listitem>char[] (char array)</listitem>
      <listitem>hibernate entity with a long id</listitem>
      <listitem>hibernate entity with a string id</listitem>
      <listitem>serializable</listitem>
    </itemizedlist>
    <para>For persistence of these variable, the type of the variable is 
    checked in the order of this list.  The first match will determine how 
    the variable is stored.
    </para>
  </section>

  <section>
    <title>Updating serialized process variables</title>
    <para>(Since jBPM 4.3)</para>
    <para>In <literal>custom</literal>s, <literal>event-handler</literal>s and other 
    user code, you can retrieve process variables.  In case a process variable 
    is stored as a serialized object, you can just make updates to your deserialized 
    objects without the need for an explicit save.  jBPM will manage deserialized process 
    variables and update them automatically if you change.  For example (@see examples package 
    org.jbpm.examples.serializedobject), look at this piece of user code inside a <literal>custom</literal>'s activity behaviour:   
    </para>
    <programlisting>public class UpdateSerializedVariables implements ActivityBehaviour {

  public void execute(ActivityExecution execution) {
    Set&lt;String&gt; messages = (Set&lt;String&gt;) execution.getVariable(&quot;messages&quot;);
    messages.clear();
    messages.add(&quot;i&quot;);
    messages.add(&quot;was&quot;);
    messages.add(&quot;updated&quot;);
  }
}</programlisting>
    <para>When the transaction commits in which this usercode was called, the
    updated messages set will be updated in the database automatically.  
    </para>
    <para>When reading process variables that are stored in serialized format from the DB 
    jBPM will monitor that deserialized object.  Right before the commit of the transaction,
    jBPM will serialize and update the variable automatically if that is necessary.  jBPM 
    will ignore updates to the deserialized object if another object was set as the value 
    in that scope  (which even can be of another type).  jBPM will also skip updating of the 
    variable if the deserialized object has not been changed.  The check to see if the 
    object has changed is based on comparing the byte arrays from serializing the object 
    again and comparing that with the byte array that was originally loaded from the db.   
    </para>
  </section>
  
  <section>
    <title>Declared variables</title>
    <para>(Since jBPM 4.4)</para>
    <para>
    Variables can be declared directly in process definition (JPDL). These variables 
    will be created at process instance startup. There can be more than one variable definition.
    </para>
    <para>There are several possible ways for declaring variable:</para>
    <itemizedlist>
    	<listitem>declare <literal>String</literal> variable initialized with static text
    		<programlisting>
&lt;variable name=&quot;declaredVar&quot; type=&quot;string&quot; init-expr=&quot;testing declared variable&quot;/&gt;
    		</programlisting>
    	</listitem>
    	<listitem>declare <literal>custom</literal> variable initialized with EL
    		<programlisting>
&lt;variable name=&quot;declaredVar&quot; type=&quot;long&quot; init-expr=&quot;#{anotherVar}&quot;/&gt;
    		</programlisting>
    	</listitem>
    	<listitem>declare <literal>custom</literal> variable initialized with serializable class
    		<programlisting>
&lt;variable name=&quot;declaredVar&quot; type=&quot;serializable&quot; &gt;
   &lt;object class=&quot;org.jbpm.examples.variable.declared.HistoryVariable&quot; /&gt;
&lt;/variable&gt;
    		</programlisting>
    	</listitem>
    </itemizedlist>
    <para>As shown above variable values can be assigned in two ways: using attribute <literal>init-expr</literal> or
    by nesting init descriptor (element <literal>object</literal>) within variable tags. 
    </para>
    <para>
    Note: Only one of value assignment can be used for a variable declaration.  
    </para>
      <table><title>Attribute for  <literal>variable</literal> element:</title>
        <tgroup cols="5" rowsep="1" colsep="1">
          <thead>
            <row>
              <entry>Attribute</entry>
              <entry>Type</entry>
              <entry>Default</entry>
              <entry>Required?</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>name</literal></entry>
              <entry>text</entry>
              <entry></entry>
              <entry><emphasis role="bold">required</emphasis></entry>
              <entry>name of the variable</entry>
            </row>
            <row>
              <entry><literal>type</literal></entry>
              <entry>text</entry>
              <entry></entry>
              <entry><emphasis role="bold">required</emphasis></entry>
              <entry>type of the variable, must refer to types defined in jbpm.variable.types.xml</entry>
            </row>
            <row>
              <entry><literal>init-expr</literal></entry>
              <entry>text (EL expression)</entry>
              <entry></entry>
              <entry><emphasis role="bold">optional</emphasis></entry>
              <entry>value for the variable, this attribute or nested element must be given</entry>
            </row>
            <row>
              <entry><literal>init-expr-type</literal></entry>
              <entry>text</entry>
              <entry>UEL</entry>
              <entry><emphasis role="bold">optional</emphasis></entry>
              <entry>defines language for expression evaluation</entry>
            </row>
            <row>
              <entry><literal>history</literal></entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry><emphasis role="bold">optional</emphasis></entry>
              <entry>indicates wheater variable should be stored in history or not - default false, 
    for more information about history see <xref linkend="variablehistory" /></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
     <table><title>Nested element for <literal>variable</literal>:</title>
        <tgroup cols="5" rowsep="1" colsep="1">
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Multiplicity</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>object</literal></entry>
              <entry>1</entry>
              <entry>Value for the variable as custom object, either this element or <literal>init-expr</literal> attribute must be specified</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  </section>
  
  <section id="variablehistory">
    <title>Variables history</title>
    <para>(Since jBPM 4.4)</para>
    
    <para>Variables can be marked to be persisted as history records. This means that once process instance is ended and 
    its runtime information is removed, history details are preserved. 
    </para>
    <para>History can be enabled for variable in two ways:</para>
    <itemizedlist>
    	<listitem>via public API <literal>ExecutionService</literal>:
	    	<itemizedlist>
	    		<listitem><literal>void createVariable(String executionId, String name, Object value, boolean historyEnabled);</literal></listitem>
	    		<listitem><literal>void createVariables(String executionId, Map&lt;String, ?&gt; variables, boolean historyEnabled);</literal></listitem>
	    	</itemizedlist>
    	</listitem>
    	<listitem>on variable declaration
    	<programlisting>
&lt;variable name=&quot;declaredVar&quot; type=&quot;string&quot; init-expr=&quot;testing declared variable&quot; history=&quot;true&quot;/&gt;
    		</programlisting>
    	</listitem>
    </itemizedlist>
    <para>Currently all variables are persisted in history as <literal>String</literal> values.
    Variable (regardless of its type) will be converted to a string value using <literal>toString()</literal>
    method. In case of custom objects they should override <literal>toString()</literal> method to provide string representation
    of the variable that will be available as history record. This will provide an easy way for enabling convienient search
    capabilities based on variable values. </para>
    <para>Access to history variables is given via <literal>HistoryService</literal> methods:</para>
    <itemizedlist>
   		<listitem><literal>Object getVariable(String processInstnceId, String name);</literal></listitem>
   		<listitem><literal>Map&lt;String, Object&gt; getVariables(String processInstnceId, Set&lt;String&gt; variableNames);</literal></listitem>
   		<listitem><literal>Set&lt;String&gt; getVariableNames(String processInstnceId);</literal></listitem>
   	</itemizedlist>
  </section>
  
</chapter>
